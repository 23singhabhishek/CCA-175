Requirement: Number of orders by order date and order status from orders table
==============================================================================
val ordersRDD = sc.textFile("sqoop/sqoop-import/orders")
val ordersMapRDD = ordersRDD.map(rec => ((rec.split(",")(1), rec.split(",")(3)), 1))
val ordersByStatusPerDay = ordersMapRDD.reduceByKey((v1, v2) => v1+v2)
ordersByStatusPerDay.collect().foreach(println)

OR

val dsn = sc.textFile("sqoop/sqoop-import/orders").map(t => ((t.split(",")(1), t.split(",")(3)),1)).reduceByKey((a,b) => (a+b))

scala> dsn.sortByKey().take(7).foreach(println)
((2013-07-25 00:00:00.0,CANCELED),1)                                            
((2013-07-25 00:00:00.0,CLOSED),20)
((2013-07-25 00:00:00.0,COMPLETE),42)
((2013-07-25 00:00:00.0,ON_HOLD),5)
((2013-07-25 00:00:00.0,PAYMENT_REVIEW),3)
((2013-07-25 00:00:00.0,PENDING),13)
((2013-07-25 00:00:00.0,PENDING_PAYMENT),41)

mysql> select order_date, order_status, count(order_id) from orders group by order_date, order_status limit 7;
| order_date          | order_status    | count(order_id) |
+---------------------+-----------------+-----------------+
| 2013-07-25 00:00:00 | CANCELED        |               1 |
| 2013-07-25 00:00:00 | CLOSED          |              20 |
| 2013-07-25 00:00:00 | COMPLETE        |              42 |
| 2013-07-25 00:00:00 | ON_HOLD         |               5 |
| 2013-07-25 00:00:00 | PAYMENT_REVIEW  |               3 |
| 2013-07-25 00:00:00 | PENDING         |              13 |
| 2013-07-25 00:00:00 | PENDING_PAYMENT |              41 |
+---------------------+-----------------+-----------------+
7 rows in set (0.34 sec)



Get the list of valid orders by order_date and order_status
===========================================================

val ordRDD = sc.textFile("sqoop/sqoop-import/orders").map(t => (t.split(",")(0).toInt, t))
val orditmRDD = sc.textFile("sqoop/sqoop-import/order-items").map(t => (t.split(",")(1).toInt, 1)).distinct()
val joinds = orditmRDD.join(ordRDD).map(t => ((t._2._2.split(",")(1), t._2._2.split(",")(3)),1)).reduceByKey((a,b) => (a+b))

scala> joinds.sortByKey().take(7).foreach(println)
((2013-07-25 00:00:00.0,CANCELED),1)
((2013-07-25 00:00:00.0,CLOSED),18)
((2013-07-25 00:00:00.0,COMPLETE),33)
((2013-07-25 00:00:00.0,ON_HOLD),4)
((2013-07-25 00:00:00.0,PAYMENT_REVIEW),2)
((2013-07-25 00:00:00.0,PENDING),10)
((2013-07-25 00:00:00.0,PENDING_PAYMENT),31)

mysql> select order_date, order_status, count(distinct(order_id)) from orders a, order_items b where a.order_id = b.order_item_order_id group by order_date, order_status limit 7;
+---------------------+-----------------+---------------------------+
| order_date          | order_status    | count(distinct(order_id)) |
+---------------------+-----------------+---------------------------+
| 2013-07-25 00:00:00 | CANCELED        |                         1 |
| 2013-07-25 00:00:00 | CLOSED          |                        18 |
| 2013-07-25 00:00:00 | COMPLETE        |                        33 |
| 2013-07-25 00:00:00 | ON_HOLD         |                         4 |
| 2013-07-25 00:00:00 | PAYMENT_REVIEW  |                         2 |
| 2013-07-25 00:00:00 | PENDING         |                        10 |
| 2013-07-25 00:00:00 | PENDING_PAYMENT |                        31 |
+---------------------+-----------------+---------------------------+




