Average revenue per day
======================

total revenue per day/no of orders
date, order
order, subtotl
val ordRDD = sc.textFile("sqoop/sqoop-import/orders")
val orditmRDD = sc.textFile("sqoop/sqoop-import/order-items")
val map1 = ordRDD.map(t => (t.split(",")(0).toInt, t.split(",")(1)))
val map2 =  orditmRDD.map(t => (t.split(",")(1).toInt, t.split(",")(4).toFloat))
val map2r = map2.reduceByKey((a,b) => (a+b))
val joind = map1.join(map2r)
val joindm =  joind.map(t => ((t._2._1), (t._2._2, t._1)))
val fin = joindm.aggregateByKey((0.0,0))((a,b) => (a._1 + b._1, b._2 + 1), (t1 , t2) => (t1._1 + t2._1, t1._2 + t2._2))



val ordersRDD = sc.textFile("/user/cloudera/sqoop/sqoop-import/orders")
val orderItemsRDD = sc.textFile("/user/cloudera/sqoop/sqoop-import/order-items")
val ordersParsedRDD = ordersRDD.map(rec => (rec.split(",")(0), rec))
val orderItemsParsedRDD = orderItemsRDD.map(rec => (rec.split(",")(1), rec))
val ordersJoinOrderItems = orderItemsParsedRDD.join(ordersParsedRDD)
val ordersJoinOrderItemsMap = ordersJoinOrderItems.map(t => ((t._2._2.split(",")(1), t._1), t._2._1.split(",")(4).toFloat))
val revenuePerDayPerOrder = ordersJoinOrderItemsMap.reduceByKey((acc, value) => acc + value)
val revenuePerDayPerOrderMap = revenuePerDayPerOrder.map(rec => (rec._1._1, rec._2))
val revenuePerDay = revenuePerDayPerOrderMap.aggregateByKey((0.0, 0))((acc, revenue) => (acc._1 + revenue, acc._2 + 1), 
(total1, total2) => (total1._1 + total2._1, total1._2 + total2._2))

revenuePerDay.collect().foreach(println)

val avgRevenuePerDay = revenuePerDay.
  map(x => (x._1, x._2._1/x._2._2))
